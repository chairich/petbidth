'use client'

import Link from 'next/link';
import React, { useState } from 'react';
import { useRouter } from 'next/navigation';
import { createClient } from '@supabase/supabase-js';

const supabase = createClient(
  process.env.NEXT_PUBLIC_SUPABASE_URL!,
  process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY!
);

const RegisterArea = () => {
  const router = useRouter();
  const [passwordVisible, setPasswordVisible] = useState(false);
  const [loading, setLoading] = useState(false);
  const [memberType, setMemberType] = useState('general');
  const [formData, setFormData] = useState({
    email: '',
    username: '',
    fullname: '',
    phone: '',
    facebook: '',
    password: '',
    memberType: 'general'
  });

  const handleChange = (e: React.ChangeEvent<HTMLInputElement | HTMLSelectElement>) => {
    setFormData({ ...formData, [e.target.name]: e.target.value });
  };

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    const { email, password, username, fullname, phone, facebook, memberType } = formData;

    console.log("üì• Input Data:", formData);

    const phonePattern = /^0[6-9]\d{8}$/;
    if (!phonePattern.test(phone)) {
      alert('‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£‡πÉ‡∏´‡πâ‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á (06x‚Äì09x ‡πÅ‡∏•‡∏∞ 10 ‡∏´‡∏•‡∏±‡∏Å)');
      return;
    }

    try {
      const { data: dupUsers, error: dupError } = await supabase
        .from('users')
        .select('*')
        .or(`email.eq.${email},username.eq.${username},phone.eq.${phone},facebook.eq.${facebook}`);

      if (dupError) {
        console.error("‚ùå Error checking duplicates:", dupError);
      }

      if (dupUsers && dupUsers.length > 0) {
        alert('‡∏≠‡∏µ‡πÄ‡∏°‡∏•, ‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£, Facebook ‡∏´‡∏£‡∏∑‡∏≠‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ô‡∏µ‡πâ‡∏ñ‡∏π‡∏Å‡πÉ‡∏ä‡πâ‡πÑ‡∏õ‡πÅ‡∏•‡πâ‡∏ß');
        return;
      }

      console.log("üì§ Sending to Supabase Auth:", { email, password });
      const { data: signupData, error: signupError } = await supabase.auth.signUp({
        email,
        password,
        options: {
          data: {
            username,
            fullname,
            phone,
            facebook,
            role: memberType === 'vip' ? 'vip' : 'general',
            status: memberType === 'vip' ? 'pending' : 'approved'
          }
        }
      });

      if (signupError) {
        console.error("‚ùå Auth Signup Error:", signupError);
        alert("‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: " + signupError.message);
        return;
      }

      const sessionData = await supabase.auth.getSession();
      const access_token = sessionData.data?.session?.access_token;
      const userId = sessionData.data?.session?.user.id;
      console.log("‚úÖ Auth signup success, user ID:", userId);

      if (!userId || !access_token) {
        alert("‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏∂‡∏á session ‡∏´‡∏£‡∏∑‡∏≠‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÑ‡∏î‡πâ ‡πÇ‡∏õ‡∏£‡∏î‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà");
        return;
      }

      const supabaseWithToken = createClient(
        process.env.NEXT_PUBLIC_SUPABASE_URL!,
        process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY!,
        {
          global: {
            headers: {
              Authorization: `Bearer ${access_token}`,
            },
          },
        }
      );

      const { data: existingUser, error: fetchError } = await supabaseWithToken
        .from('users')
        .select('id')
        .eq('id', userId)
        .single();

      if (existingUser) {
        console.log("‚ö†Ô∏è User already exists in 'users' table. Skipping insert.");
        alert("‡∏ö‡∏±‡∏ç‡∏ä‡∏µ‡∏ô‡∏µ‡πâ‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö‡πÅ‡∏•‡πâ‡∏ß ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö");
        router.push('/login');
        return;
      }

      const role = memberType === 'vip' ? 'vip' : 'general';
      const status = memberType === 'vip' ? 'pending' : 'approved';

      const { error: insertError } = await supabaseWithToken.from('users').insert([{
        id: userId,
        email,
        username,
        fullname,
        phone,
        facebook,
        role,
        status,
        created_at: new Date().toISOString()
      }]);

      console.log('üì¶ Inserted data to users table:', { userId, email, username });

      if (insertError) {
        console.error("‚ùå Insert Error:", insertError);
        alert('‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß: ' + insertError.message);
        return;
      }

      if (memberType === 'vip') {
        alert('‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏≠‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥');
        return;
      }

      alert('‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö');
      router.push('/login');

    } catch (error) {
      console.error("‚ùó Unexpected Error:", error);
      alert('‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÑ‡∏°‡πà‡∏Ñ‡∏≤‡∏î‡∏Ñ‡∏¥‡∏î');
    }
  };

  const togglePasswordVisibility = () => setPasswordVisible(!passwordVisible);

  const handleFacebookLogin = async () => {
    await supabase.auth.signInWithOAuth({
      provider: 'facebook',
      options: { redirectTo: 'https://petbidthai.com/' }
    });
  };

  return (
    // [‡πÇ‡∏Ñ‡∏£‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á UI ‡πÄ‡∏î‡∏¥‡∏°‡∏Ñ‡∏á‡πÑ‡∏ß‡πâ ‡πÑ‡∏°‡πà‡∏ï‡∏±‡∏î‡∏ó‡∏¥‡πâ‡∏á‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏°‡∏ö‡∏π‡∏£‡∏ì‡πå]
    <div className="register-area">
      <div className="container">
        <div className="row g-4 g-lg-5 align-items-center justify-content-between">
          <div className="col-12 col-md-6 col-xl-5">
            <div className="register-card">
              <h2>‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å</h2>
              <p>‡∏´‡∏≤‡∏Å‡∏°‡∏µ‡∏ö‡∏±‡∏ç‡∏ä‡∏µ‡πÅ‡∏•‡πâ‡∏ß <Link className="ms-1 hover-primary" href="/login">‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö</Link></p>
              <div className="register-form mt-4">
                <form onSubmit={handleSubmit}>
                  <div className="form-group mb-3">
                    <input className="form-control" name="email" type="email" placeholder="‡∏≠‡∏µ‡πÄ‡∏°‡∏•" required onChange={handleChange} />
                  </div>
                  <div className="form-group mb-3">
                    <input className="form-control" name="username" type="text" placeholder="‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô" required onChange={handleChange} />
                  </div>
                  <div className="form-group mb-3">
                    <input className="form-control" name="fullname" type="text" placeholder="‡∏ä‡∏∑‡πà‡∏≠-‡∏ô‡∏≤‡∏°‡∏™‡∏Å‡∏∏‡∏•" required onChange={handleChange} />
                  </div>
                  <div className="form-group mb-3">
                    <input className="form-control" name="phone" type="text" placeholder="‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£‡∏®‡∏±‡∏û‡∏ó‡πå" required onChange={handleChange} />
                  </div>
                  <div className="form-group mb-3">
                    <div className="input-group">
                      <span className="input-group-text">https://www.facebook.com/</span>
                      <input
                        className="form-control"
                        name="facebook"
                        type="text"
                        placeholder="‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ (‡πÄ‡∏ä‡πà‡∏ô your.name)"
                        required
                        onChange={(e) => {
                          const usernameOnly = e.target.value.replace(/^https?:\/\/(www\.)?facebook\.com\//, '');
                          setFormData({ ...formData, facebook: 'https://www.facebook.com/' + usernameOnly });
                        }}
                      />
                    </div>
                    <button type="button" onClick={handleFacebookLogin} className="btn btn-outline-primary btn-sm mt-2">‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡∏ú‡πà‡∏≤‡∏ô Facebook</button>
                  </div>
                  <div className="form-group mb-3">
                    <label className="label-psswd" htmlFor="registerPassword" onClick={togglePasswordVisibility}>
                      {passwordVisible ? '‡∏ã‡πà‡∏≠‡∏ô‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô' : '‡πÅ‡∏™‡∏î‡∏á‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô'}
                    </label>
                    <input className="form-control" name="password" id="registerPassword" type={passwordVisible ? 'text' : 'password'} placeholder="‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô" required onChange={handleChange} />
                  </div>
                  <div className="form-group mb-3">
                    <label>‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å:</label>
                    <select className="form-control mt-1" name="memberType" value={memberType} onChange={(e) => {
                      setMemberType(e.target.value);
                      handleChange(e);
                    }} required>
                      <option value="general">‡∏ú‡∏π‡πâ‡∏õ‡∏£‡∏∞‡∏°‡∏π‡∏•‡∏ó‡∏±‡πà‡∏ß‡πÑ‡∏õ</option>
                      <option value="vip">‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤ VIP</option>
                    </select>
                  </div>
                  <div className="form-check mb-3">
                    <input className="form-check-input" id="agree" type="checkbox" required />
                    <label className="form-check-label" htmlFor="agree">
                      ‡∏â‡∏±‡∏ô‡∏¢‡∏≠‡∏°‡∏£‡∏±‡∏ö <Link href="/terms" className="text-decoration-underline">‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô</Link>
                    </label>
                  </div>
                  <button className="btn btn-primary w-100" type="submit" disabled={loading}>{loading ? "‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏™‡∏°‡∏±‡∏Ñ‡∏£..." : "‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å"}</button>
                </form>
              </div>
            </div>
          </div>
          <div className="col-12 col-md-6">
            <div className="register-thumbnail mt-5 mt-md-0">
              <img src="/assets/img/illustrator/4.png" alt="" />
            </div>
          </div>
        </div>
      </div>
    </div>
  );
};

export default RegisterArea;